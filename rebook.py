#!/usr/bin/env python
# -----------------------------------------------------------------------
# rebook.py
# Author: Sophie Li, Connie Xu, Jayson Wu
# -----------------------------------------------------------------------
import os
from sys import stderr
from flask import Flask, request, make_response, redirect, url_for, jsonify
from flask import render_template, session
from database import Database
from getbookinfo import getBookInfo
import book
from getuserinfo import getUserInfo
from sendemail import sendBuyerPurchaseEmail, sendSellerPurchaseEmail, sendBuyerCancelEmail, sendSellerCancelEmail
from CASClient import CASClient
from database_files import booklistings, bookbag, purchases, listingphotos
import time
from dotenv import load_dotenv
import cloudinary
from cloudinary.uploader import upload, destroy
from cloudinary.utils import cloudinary_url
# -----------------------------------------------------------------------

app = Flask(__name__, template_folder='templates')

# Generated by os.urandom(16)
app.secret_key = b'\xcdt\x8dn\xe1\xbdW\x9d[}yJ\xfc\xa3~/'

# app.config['SESSION_TYPE'] = 'filesystem'
# app.config['SESSION_FILE_DIR'] = '.'
load_dotenv()

cloudinary.config(
    cloud_name=os.getenv('CLOUD_NAME'),
    api_key=os.getenv('API_KEY'),
    api_secret=os.getenv('API_SECRET')
)

# destroy('jkg4gp7njzd44jnajha7')

# -----------------------------------------------------------------------
# NON-ROUTE FUNCTIONS
# -----------------------------------------------------------------------

# checks if the user completed an action, such as post, edit, delete,
# in the current browser session, and signals what alert to send to the frontend


def alert(alert):
    if alert in session:
        return session.pop(alert, False)
    else:
        return False

# Alters database fields to indicate that a book has been bought,
# thereby completing purchase; is protected from URL hacking


def buy(listing_id, version):

    username = CASClient().authenticate().rstrip()

    try:
        database = Database()
        database.connect()
        listing = booklistings.get(database, listing_id, username)

        # update booklistings to show pending status instead of active
        seller_status = 'pending'
        listinginfo = [listing['isbn'], listing['seller'], listing['condition'], listing['price'],
                       seller_status, listing['description'], listing['coursenum'], listing['title'],
                       listing['authors'], listing['time_created'], listing_id]
        booklistings.update_row(database, listinginfo)

        # update buyer's bookbag
        if bookbag.contains(database, username, listing_id):
            bookbag.delete_row(database, [username, listing_id])

        # for everyone else, change status to taken
        bookbag.change_status(database, listing_id, 'taken')

        # for all other incomplete transactions with the same listing_id remove it
        # transactions.delete_row(database, [listing_id])

        # add to purchases
        purchases.insert_row(
            database, [listing_id, username, 'pending'])
        database.disconnect()

        buyer = getUserInfo(username)
        seller = getUserInfo(listing['seller'])

        # sends emails to buyers and seller
        sendBuyerPurchaseEmail(buyer, seller, listing)
        sendSellerPurchaseEmail(buyer, seller, listing)

    except Exception as e:
        print("buy(): " + str(e), file=stderr)
        html = render_template('error.html', username=username)
        response = make_response(html)
        return response
    html = render_template('buy.html', username=username,
                           email=seller.getEmail(), listing=listing, version=version)
    response = make_response(html)
    return response

# -----------------------------------------------------------------------
# ROUTE FUNCTIONS
# -----------------------------------------------------------------------

# Renders the landing page, which is accessible to those without CAS logins


@app.route('/', methods=['GET'])
def landing():
    html = render_template('landing.html')
    response = make_response(html)
    return response

# Renders the homepage of the website, which has a big search bar and post listing button


@app.route('/home', methods=['GET'])
# @app.route('/index', methods=['GET'])
def home():
    username = CASClient().authenticate().rstrip()
    html = render_template('index.html',
                           username=username)
    response = make_response(html)
    return response

# -----------------------------------------------------------------------

# Renders the Buyer Bookbag page


@app.route('/buyerbookbag', methods=['GET'])
def buyerbookbag():
    username = CASClient().authenticate().rstrip()
    # send a one-time alert if redirected from a delete, cancel, remove, or add request
    page = ''
    removebookbag_success = alert('removebookbag')
    cancel_success = alert('cancelbookbag')
    remove_purchase_success = alert('removepurchase')
    add_success = alert('addbookbag')

    if cancel_success:
        page = 'pending'
    elif remove_purchase_success:
        page = 'completed'

    listingRemovedFromBookbag_success = False

    # obtain books in bookbag from database
    try:
        database = Database()
        database.connect()
        results = database.get_buyer_bookbag(username)
        # classify the books in the buyer bookbag by their status
        active = []
        pending = []
        completed = []
        removed = []

        for listing_id in results['other']:
            listing = booklistings.get(database, listing_id, username)
            print(listing)
            if bookbag.contains(database, username, listing_id):
                removed.append(listing['title'])
                listingRemovedFromBookbag_success = True
                bookbag.delete_row(database, [username, listing_id])
        for listing_id in results['active']:
            listing = booklistings.get(database, listing_id, username)
            active.append(listing)
        for listing_id in results['pending']:
            listing = booklistings.get(database, listing_id, username)
            email = getUserInfo(listing['seller']).getEmail()
            listing['email'] = email
            pending.append(listing)
        for listing_id in results['completed']:
            listing = booklistings.get(database, listing_id, username)
            email = getUserInfo(listing['seller']).getEmail()
            listing['email'] = email
            completed.append(listing)
        database.disconnect()

    except Exception as e:
        print("buyerbookbag(): " + str(e), file=stderr)
        html = render_template('error.html', username=username)
        response = make_response(html)
        return response

    html = render_template('buyerbookbag.html',
                           username=username,
                           active=active,
                           pending=pending,
                           completed=completed,
                           removebookbag_success=removebookbag_success,
                           cancelbookbag_success=cancel_success,
                           removepurchase_success=remove_purchase_success,
                           listingRemovedFromBookbag_success=listingRemovedFromBookbag_success,
                           removed=removed,
                           add_success=add_success,
                           page=page)
    response = make_response(html)
    return response

# Renders the Buyer Bookbag page when the tabs on the page are clicked


@app.route('/buyerbookbagajax/<state>', methods=['POST'])
def buyerbookbagajax(state):
    username = CASClient().authenticate().rstrip()
    # send a one-time alert if redirected from a delete, cancel, remove, or add request
    page = state

    listingRemovedFromBookbag_success = False

    # obtain books in bookbag from database
    try:
        database = Database()
        database.connect()
        results = database.get_buyer_bookbag(username)
        # classify the books in the buyer bookbag by their status
        active = []
        pending = []
        completed = []
        removed = []

        for listing_id in results['other']:
            listing = booklistings.get(database, listing_id, username)
            print(listing)
            if bookbag.contains(database, username, listing_id):
                removed.append(listing['title'])
                listingRemovedFromBookbag_success = True
                bookbag.delete_row(database, [username, listing_id])
        for listing_id in results['active']:
            listing = booklistings.get(database, listing_id, username)
            active.append(listing)
        for listing_id in results['pending']:
            listing = booklistings.get(database, listing_id, username)
            email = getUserInfo(listing['seller']).getEmail()
            listing['email'] = email
            pending.append(listing)
        for listing_id in results['completed']:
            listing = booklistings.get(database, listing_id, username)
            email = getUserInfo(listing['seller']).getEmail()
            listing['email'] = email
            completed.append(listing)
        database.disconnect()

    except Exception as e:
        print("buyerbookbagajax(): " + str(e), file=stderr)
        html = render_template('error.html', username=username)
        response = make_response(html)
        return response

    html = render_template('buyerbookbagajax.html',
                           username=username,
                           active=active,
                           pending=pending,
                           completed=completed,
                           removed=removed,
                           listingRemovedFromBookbag_success=listingRemovedFromBookbag_success,
                           page=page)
    response = make_response(html)
    return response

# -----------------------------------------------------------------------

# Renders the Seller Station page


@app.route('/sellerstation', methods=['GET'])
def sellerstation():

    username = CASClient().authenticate().rstrip()

    # send a one-time alert if redirected from a delete, cancel, remove, or confirm request
    delete_success = alert('deletelisting')
    cancel_success = alert('cancellistingseller')
    remove_success = alert('removesellinghistory')
    confirm_success = alert('confirmtransaction')

    page = ''

    if cancel_success:
        page = 'pending'
    elif remove_success or confirm_success:
        page = 'completed'

    # obtain books in seller station from database
    try:
        database = Database()
        database.connect()
        results = database.get_seller_station(username)
        # classify the books in the seller station by their status
        active = []
        pending = []
        completed = []

        for listing_id in results['active']:
            listing = booklistings.get(database, listing_id, username)
            active.append(listing)
        for listing_id in results['pending']:
            listing = booklistings.get(database, listing_id, username)
            buyer = purchases.get_buyer(database, listing_id)
            email = getUserInfo(buyer).getEmail()
            listing['buyer'] = buyer
            listing['email'] = email
            pending.append(listing)
        for listing_id in results['completed']:
            listing = booklistings.get(database, listing_id, username)
            buyer = purchases.get_buyer(database, listing_id)
            email = getUserInfo(buyer).getEmail()
            listing['buyer'] = buyer
            listing['email'] = email
            completed.append(listing)
        database.disconnect()

    except Exception as e:
        print("sellerstation(): " + str(e), file=stderr)
        html = render_template('error.html', username=username)
        response = make_response(html)
        return response

    html = render_template('sellerstation.html',
                           username=username,
                           active=active,
                           pending=pending,
                           completed=completed,
                           delete_success=delete_success,
                           cancel_success=cancel_success,
                           remove_success=remove_success,
                           confirm_success=confirm_success,
                           page=page)
    response = make_response(html)
    return response

# Loads the Seller Station page when the tabs on the page are clicked


@app.route('/sellerstationajax/<state>', methods=['POST'])
def sellerstationajax(state):

    username = CASClient().authenticate().rstrip()

    page = state

    # obtain books in seller station from database
    try:
        database = Database()
        database.connect()
        results = database.get_seller_station(username)
        # classify the books in the seller station by their status
        active = []
        pending = []
        completed = []

        for listing_id in results['active']:
            listing = booklistings.get(database, listing_id, username)
            active.append(listing)
        for listing_id in results['pending']:
            listing = booklistings.get(database, listing_id, username)
            buyer = purchases.get_buyer(database, listing_id)
            email = getUserInfo(buyer).getEmail()
            listing['buyer'] = buyer
            listing['email'] = email
            pending.append(listing)
        for listing_id in results['completed']:
            listing = booklistings.get(database, listing_id, username)
            buyer = purchases.get_buyer(database, listing_id)
            email = getUserInfo(buyer).getEmail()
            listing['buyer'] = buyer
            listing['email'] = email
            completed.append(listing)
        database.disconnect()

    except Exception as e:
        print("sellerstationajax(): " + str(e), file=stderr)
        html = render_template('error.html', username=username)
        response = make_response(html)
        return response

    html = render_template('sellerstationajax.html',
                           active=active,
                           pending=pending,
                           completed=completed,
                           username=username,
                           page=page)
    response = make_response(html)
    return response

# -----------------------------------------------------------------------

# Helper function which accesses the database to find listings corresponding to the search query


def _searchdatabase(query, sort, filter_condition, filter_price):

    username = CASClient().authenticate().rstrip()

    queryPS = query.replace('%', '\%').replace('_', '\_')
    queryToUse = queryPS.replace(" ", "")

    database = Database()
    database.connect()

    results = database.search(queryPS, username, sort=sort,
                              filter_condition=filter_condition, filter_price=filter_price)

    database = Database()
    database.connect()

    results_coursenum = database.search(queryToUse, username, sort=sort,
                                        filter_condition=filter_condition, filter_price=filter_price)

    for listing_id in results_coursenum:
        if listing_id not in results:
            results.append(listing_id)

    result_listings = []
    for listing_id in results:
        result_listings.append(booklistings.get(
            database, listing_id, username))

    database.disconnect()
    return result_listings

# Renders the search page


@app.route('/search', methods=['GET'])
def search():

    username = CASClient().authenticate().rstrip()

    # obtain the search query, sort, and filter parameters
    query = request.args.get("search")
    sort = request.args.get("sortOptions")
    lower = request.args.get("lower-bound")
    upper = request.args.get("upper-bound")
    filter_price = [lower, upper]
    new = request.args.get("new")
    good = request.args.get("good")
    fair = request.args.get("fair")
    poor = request.args.get("poor")

    if sort is None:
        sort = "time_most_recent"

    if (not (new or good or fair or poor)):
        filter_condition = None
    else:
        filter_condition = [new, good, fair, poor]

    if query is None:
        query = ''

    # fetch search results from database
    try:
        result_listings = _searchdatabase(
            query, sort, filter_condition, filter_price)

    except Exception as e:
        print("search(): " + str(e), file=stderr)
        html = render_template('error.html', username=username)
        response = make_response(html)
        return response

    html = render_template('search.html',
                           username=username,
                           query=query,
                           results=result_listings,
                           lower=lower,
                           upper=upper,
                           sort=sort,
                           new=new,
                           good=good,
                           fair=fair,
                           poor=poor,
                           filter_condition=filter_condition)
    response = make_response(html)
    return response

# Renders the search page when the filters are clicked


@app.route('/searchfilters', methods=['POST'])
def searchfilters():

    username = CASClient().authenticate().rstrip()

    query = request.args.get("search")
    sort = request.args.get("sortOptions")
    lower = request.args.get("lower-bound")
    upper = request.args.get("upper-bound")
    filter_price = [lower, upper]
    new = request.args.get("new")
    good = request.args.get("good")
    fair = request.args.get("fair")
    poor = request.args.get("poor")

    if sort == 'undefined':
        sort = None

    filter_condition = []
    if new == 'true':
        filter_condition.append('New')
    if good == 'true':
        filter_condition.append('Good')
    if fair == 'true':
        filter_condition.append('Fair')
    if poor == 'true':
        filter_condition.append('Poor')
    if filter_condition == []:
        filter_condition = None

    if query is None:
        query = ''

    # fetch search results from database
    try:
        result_listings = _searchdatabase(
            query, sort, filter_condition, filter_price)

    except Exception as e:
        print("searchfilters(): " + str(e), file=stderr)
        html = render_template('errortext.html')
        response = make_response(html)
        return response

    html = render_template('searchresults.html',
                           results=result_listings)
    response = make_response(html)
    return response

# -----------------------------------------------------------------------

# Renders the isbn search page, which is the initial step in posting a listing


@app.route('/postlisting', methods=['GET'])
def postListing():

    username = CASClient().authenticate().rstrip()

    html = render_template('postlisting.html', username=username)
    response = make_response(html)
    return response

# Renders the final page of the post process, a form where users input the listing information


@app.route('/postlisting2', methods=['GET', 'POST'])
def postListing2():

    username = CASClient().authenticate().rstrip()
    isbn = request.args.get("isbn")
    book = getBookInfo(isbn)

    html = render_template('postlisting2.html', book=book,
                           username=username, isbn=isbn)
    response = make_response(html)
    return response

# Posts the listing to the database, making it available and visible to buyers


@app.route('/post2', methods=['POST'])
def post2():

    username = CASClient().authenticate().rstrip()

    # get information from the posting form
    isbn = request.form["isbn"]
    book = getBookInfo(isbn)
    price = request.form["price"]
    coursenum = request.form["coursenum"].replace(" ", "").upper()
    info = request.form["info"]
    condition = request.form["conditionRadios"]

    uploaded_files = request.files.getlist("file")

    title = book.getTitle()
    author = book.getAuthorString()
    seller_status = "active"
    input1 = [isbn, username, condition, price,
              seller_status, info, coursenum, title,
              author, time.time()]

    # add newly created listing to database
    try:
        database = Database()
        database.connect()
        listing_id = booklistings.insert_row(database, input1)
        for file_to_upload in uploaded_files:
            if file_to_upload:
                upload_result = upload(file_to_upload)
                thumbnail_url, options = cloudinary_url(
                    upload_result['public_id'],
                    format="jpg",
                    crop="fill")
                listingphotos.insert_row(
                    database, [upload_result['public_id'], listing_id, thumbnail_url])
        database.disconnect()
    except Exception as e:
        print("post2(): " + str(e), file=stderr)
        html = render_template('error.html', username=username)
        response = make_response(html)
        return response
    session['post'] = True

    return redirect(url_for('show_listing', listing_id=listing_id))

# -----------------------------------------------------------------------

#  Deletes listing with listing_id


@app.route('/delete_listing/<listing_id>', methods=['POST'])
def delete_listing(listing_id):

    username = CASClient().authenticate().rstrip()

    try:
        database = Database()
        database.connect()

        session['deletelisting'] = True

        listing = booklistings.get(database, listing_id, username)
        if listing['seller_status'] != 'active':
            database.disconnect()
            session['deletelisting'] = False
            html = render_template('error.html', username=username)
            response = make_response(html)
            return response

        if listing['photos'] is not None:
            for photo in listing['photos']:
                destroy(photo[0])
                listingphotos.delete_row(database, [photo[0]])

        # update booklistings to show pending status instead of active
        seller_status = 'removed'
        listinginfo = [listing['isbn'], listing['seller'], listing['condition'], listing['price'],
                       seller_status, listing['description'], listing['coursenum'], listing['title'],
                       listing['authors'], listing['time_created'], listing_id]
        booklistings.update_row(database, listinginfo)

        # update bookbag
        bookbag.change_status(database, listing_id, "removed")
        database.disconnect()

    except Exception as e:
        print("delete_listing(): " + str(e), file=stderr)
        html = render_template('error.html', username=username)
        response = make_response(html)
        return response
    return redirect(url_for('sellerstation'))

# -----------------------------------------------------------------------

# Displays listing details for listing with listing_id


@app.route('/listing/<listing_id>', methods=['POST', 'GET'])
def show_listing(listing_id):

    # check if there are any alert messages if this request follows a post or success call
    post_success = alert('post')
    update_success = alert('updatelisting')

    username = CASClient().authenticate().rstrip()

    # retrieve listing details from database
    try:
        database = Database()
        database.connect()
        listing = booklistings.get(database, listing_id, username)
        buyer = purchases.get_buyer(database, listing_id)
        listing['email'] = ''
        listing['buyer'] = buyer
        if buyer is not None:
            email = getUserInfo(buyer).getEmail()
            listing['email'] = email

        database.disconnect()
        print(listing['seller_status'])
        if len(listing) is 0 or listing['seller_status'] == 'removed':
            html = render_template('nolisting.html', username=username)
            response = make_response(html)
        else:
            book = getBookInfo(listing['isbn'])
            print(book.getImage())
            email = getUserInfo(listing['seller']).getEmail()
            html = render_template('listing.html', book=book,
                                   username=username, email=email, listing=listing,
                                   post_success=post_success,
                                   update_success=update_success)
            response = make_response(html)
        return response
    except Exception as e:
        print("show_listing(): " + str(e), file=stderr)
        html = render_template('error.html', username=username)
        response = make_response(html)
        return response

# -----------------------------------------------------------------------

# Renders the edit listing form for the listing with the specified listing_id


@app.route('/edit/<listing_id>', methods=['POST'])
def edit(listing_id):
    username = CASClient().authenticate().rstrip()

    try:
        database = Database()
        database.connect()
        listing = booklistings.get(database, listing_id, username)
        database.disconnect()
    except Exception as e:
        print("edit(): " + str(e), file=stderr)
        html = render_template('error.html', username=username)
        response = make_response(html)
        return response

    if listing['seller_status'] != 'active':
        html = render_template('nolisting.html', username=username)
        response = make_response(html)
        return response

    book = getBookInfo(listing['isbn'])

    html = render_template('edit.html', listing=listing,
                           book=book, username=username)
    response = make_response(html)
    return response

# Updates the database with the new, edited listing information for the listing with listing_id


@app.route('/update_listing/<listing_id>', methods=['POST'])
def update_listing(listing_id):

    username = CASClient().authenticate().rstrip()

    # store in session that the user is updating a listing in order to generate the correct alert
    session['updatelisting'] = True

    # retrieve updated fields from the update listing form
    price = request.form["price"]
    coursenum = request.form["coursenum"].replace(" ", "").upper()
    info = request.form["info"]
    condition = request.form["conditionRadios"]
    clearimages = request.form["clearimages"]
    uploaded_files = request.files.getlist("file")

    try:
        database = Database()
        database.connect()
        listing = booklistings.get(database, listing_id, username)

        if listing['seller_status'] != 'active':
            database.disconnect()
            session['updatelisting'] = False
            print("can't update a non-active listing", file=stderr)
            html = render_template('error.html', username=username)
            response = make_response(html)
            return response

        # update the database
        update = [listing['isbn'], username, condition, price,
                  listing['seller_status'], info, coursenum, listing['title'],
                  listing['authors'], listing['time_created']]
        update.append(listing_id)

        booklistings.update_row(database, update)

        if clearimages is not "":
            print('here')
            for photo in listing['photos']:
                print('inloop')
                destroy(photo[0])
                listingphotos.delete_row(database, [photo[0]])

        # handle with updated photos
        if uploaded_files[0]:
            for photo in listing['photos']:
                destroy(photo[0])
                listingphotos.delete_row(database, [photo[0]])

        for i in range(len(uploaded_files)):
            if not uploaded_files[i]:
                break
            upload_result = upload(uploaded_files[i])
            thumbnail_url, options = cloudinary_url(
                upload_result['public_id'],
                format="jpg",
                crop="fill")
            listingphotos.insert_row(
                database, [upload_result['public_id'], listing_id, thumbnail_url])

        database.disconnect()
    except Exception as e:
        print("update_listing(): " + str(e), file=stderr)
        html = render_template('error.html', username=username)
        response = make_response(html)
        return response
    return redirect(url_for('show_listing', listing_id=listing_id))

# -----------------------------------------------------------------------

# Adds the listing with listing_id to the buyer’s bookbag


@app.route('/add_to_bookbag/<listing_id>', methods=['POST'])
def add_to_bookbag(listing_id):

    username = CASClient().authenticate().rstrip()
    buyer = username

    # add to session that there was an add request to generate alerts
    session['addbookbag'] = True

    try:
        database = Database()
        database.connect()
        bookbag.insert_row(
            database, [buyer, listing_id, 'active'])
        database.disconnect()
    except Exception as e:
        print("add_to_bookbag(): " + str(e), file=stderr)
        html = render_template('error.html', username=username)
        response = make_response(html)
        return response
    return redirect(url_for('buyerbookbag'))

# Removes the listing with listing_id from the buyer’s bookbag


@app.route('/remove_from_bookbag/<listing_id>', methods=['POST'])
def remove_from_bookbag(listing_id):
    # store in session that theire is a remove request to generate alerts
    session['removebookbag'] = True

    username = CASClient().authenticate().rstrip()
    buyer = username

    try:
        database = Database()
        database.connect()
        listing = booklistings.get(database, listing_id, username)
        if listing['seller_status'] != 'active':
            session['removebookbag'] = False
            database.disconnect()
            html = render_template('error.html', username=username)
            response = make_response(html)
            return response
        bookbag.delete_row(database, [buyer, listing_id])
        database.disconnect()
    except Exception as e:
        print("remove_from_bookbag(): " + str(e), file=stderr)
        html = render_template('error.html', username=username)
        response = make_response(html)
        return response
    return redirect(url_for('buyerbookbag'))

# -----------------------------------------------------------------------

# Handles payment method for listing with listing_id - checks what payment method the user chose, and routes accordingly


@app.route('/buypage/<listing_id>', methods=['POST'])
def buypage(listing_id):
    version = request.form['version']
    print(version)
    if version == "0":
        return buy(listing_id, version)


# -----------------------------------------------------------------------

# After buyer makes purchase, allows buyer to cancel transaction.


@app.route('/cancel/<listing_id>', methods=['POST'])
def cancel(listing_id):

    username = CASClient().authenticate().rstrip()

    # store in session that a transaction was cancelled for alerts
    session['cancelbookbag'] = True

    try:
        database = Database()
        database.connect()

        # reset listing status to active in booklistings
        listing = booklistings.get(database, listing_id, username)
        if listing['seller_status'] != 'pending':
            session['cancelbookbag'] = False
            html = render_template('error.html', username=username)
            response = make_response(html)
            database.disconnect()
            return response
        # remove row from purchases
        purchases.delete_row(database, [listing_id])

        # update booklistings
        seller_status = 'active'
        listinginfo = [listing['isbn'], listing['seller'], listing['condition'], listing['price'],
                       seller_status, listing['description'], listing['coursenum'], listing['title'],
                       listing['authors'], listing['time_created'], listing_id]
        booklistings.update_row(database, listinginfo)
        bookbag.change_status(database, listing_id, 'active')
        database.disconnect()

        buyer = getUserInfo(username)
        seller = getUserInfo(listing['seller'])


        sendBuyerCancelEmail(buyer, seller, listing)
        sendSellerCancelEmail(buyer, seller, listing)

    except Exception as e:
        print("cancel(): " + str(e), file=stderr)
        html = render_template('error.html', username=username)
        response = make_response(html)
        return response
    return redirect(url_for('buyerbookbag'))

# allow seller to cancel transaction


@app.route('/cancel_from_seller/<listing_id>', methods=['POST'])
def cancel_from_seller(listing_id):

    username = CASClient().authenticate().rstrip()

    # store in session that a transaction was cancelled for alerts
    session['cancellistingseller'] = True

    try:
        database = Database()
        database.connect()
        listing = booklistings.get(database, listing_id, username)
        if listing['seller_status'] != 'pending':
            database.disconnect()
            session['cancellistingseller'] = False
            html = render_template('error.html', username=username)
            response = make_response(html)
            return response
        # remove row from purchases
        buyer = purchases.get_buyer(database, listing_id)
        purchases.delete_row(database, [listing_id])

        # reset listing status to active in booklistings
        seller_status = 'active'
        listinginfo = [listing['isbn'], listing['seller'], listing['condition'], listing['price'],
                       seller_status, listing['description'], listing['coursenum'], listing['title'],
                       listing['authors'], listing['time_created'], listing_id]
        booklistings.update_row(database, listinginfo)
        bookbag.change_status(database, listing_id, 'active')
        database.disconnect()

        buyer = getUserInfo(buyer)
        seller = getUserInfo(listing['seller'])

        sendBuyerCancelEmail(buyer, seller, listing)
        sendSellerCancelEmail(buyer, seller, listing)

    except Exception as e:
        print("cancel_from_seller(): " + str(e), file=stderr)
        html = render_template('error.html', username=username)
        response = make_response(html)
        return response
    return redirect(url_for('sellerstation'))


# -----------------------------------------------------------------------

# Allows a user (buyer) to confirm transaction


@app.route('/confirm_transaction/<listing_id>', methods=['POST'])
def confirm_transaction(listing_id):
    username = CASClient().authenticate().rstrip()

    # store in session that a transaction was confirmed for alerts
    session['confirmtransaction'] = True

    try:
        database = Database()
        database.connect()

        listing = booklistings.get(database, listing_id, username)
        if listing['seller_status'] != 'pending':
            session['confirmtransaction'] = False
            database.disconnect()
            html = render_template('error.html', username=username)
            response = make_response(html)
            return response
        
        seller_status = 'completed'
        
        # update status to completed in purchases
        purchases.update_row(database, [seller_status, listing_id])
        
        # update listing status to completed in booklistings
        listinginfo = [listing['isbn'], listing['seller'], listing['condition'], listing['price'],
                       seller_status, listing['description'], listing['coursenum'], listing['title'],
                       listing['authors'], listing['time_created'], listing_id]
        booklistings.update_row(database, listinginfo)

        # update status to completed in everyone's bookbags
        bookbag.change_status(database, listing_id, 'completed')
        database.disconnect()

    except Exception as e:
        print("confirm_transaction(): " + str(e), file=stderr)
        html = render_template('error.html', username=username)
        response = make_response(html)
        return response
    return redirect(url_for('sellerstation'))

# -----------------------------------------------------------------------

# Removes a book from a user’s purchase history


@app.route('/remove_from_purchase/<listing_id>', methods=['POST'])
def remove_from_purchase(listing_id):
    # store in session that the user is removing from purchase history in order to generate the correct alert
    session['removepurchase'] = True

    try:
        database = Database()
        database.connect()
    except Exception as e:
        print("remove_from_purchase(): " + str(e), file=stderr)
        html = render_template('error.html', username=username)
        response = make_response(html)
        return response
    # update status in the database to finished in purchases
    purchases.update_row(database, ['finished', listing_id])
    database.disconnect()

    return redirect(url_for('buyerbookbag'))

# Removes a book from a user’s selling history


@app.route('/remove_from_selling_history/<listing_id>', methods=['POST'])
def remove_from_selling_history(listing_id):
    username = CASClient().authenticate().rstrip()

    # store in session that the user is removing from seller history in order to generate the correct alert
    session['removesellinghistory'] = True

    try:
        database = Database()
        database.connect()
        listing = booklistings.get(database, listing_id, username)
    except Exception as e:
        print("remove_from_selling_history(): " + str(e), file=stderr)
        html = render_template('error.html', username=username)
        response = make_response(html)
        return response
    # update seller_status in database to 'finished' in purchases
    seller_status = 'finished'
    listinginfo = [listing['isbn'], listing['seller'], listing['condition'], listing['price'],
                   seller_status, listing['description'], listing['coursenum'], listing['title'],
                   listing['authors'], listing['time_created'], listing_id]
    booklistings.update_row(database, listinginfo)
    database.disconnect()

    return redirect(url_for('sellerstation'))

# -----------------------------------------------------------------------

# Renders FAQ page


@app.route('/faq', methods=['GET'])
def faq():
    username = CASClient().authenticate().rstrip()
    html = render_template('faq.html', username=username)
    response = make_response(html)
    return response

# -----------------------------------------------------------------------

# Renders a 404 not found error page


@app.errorhandler(404)
def page_not_found(error):
    username = CASClient().authenticate().rstrip()
    html = render_template('notfound.html', username=username)
    response = make_response(html)
    return response

# Renders a generic error page when an database error occurs.


@app.route('/error', methods=['GET'])
def error():
    username = CASClient().authenticate().rstrip()
    html = render_template('error.html', username=username)
    response = make_response(html)
    return response

# -----------------------------------------------------------------------

# Logs the user out of Princeton CAS and redirects to the rebook home page


@app.route('/logout', methods=['GET'])
def logout():

    casClient = CASClient()
    CASClient().authenticate()
    casClient.logout()
